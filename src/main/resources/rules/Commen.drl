package com.sample

import com.sample.Angle;
import com.sample.Point;
import com.sample.Line;
import com.sample.GeoRelation;
import com.engine.CheckingEngine;


//Definition of a triangle
rule "triangle"
    //include attributes such as "salience" here...
    when
        //conditions
        //There should be 3 different points 
        $a : Point (type == GeoType.POINT)
        $b : Point (type == GeoType.POINT && $b != $a)
        $c : Point (type == GeoType.POINT && $c != $a && $c != $b)
        
        //There should be 3 different lines created from above points
        $ab : Line (type == GeoType.LINE, this.endPoints[0] == $a, this.endPoints[1] == $b) 
        $bc : Line (type == GeoType.LINE, this.endPoints[0] == $b, this.endPoints[1] == $c) 
        $ac : Line ((type == GeoType.LINE && this.endPoints[0] == $a && this.endPoints[1] == $c )|| (type == GeoType.LINE && this.endPoints[0] == $c && this.endPoints[1] == $a))
        
        //There shoulb be 3 clockwise angles created from above lines 
        $abc : Angle (type == GeoType.ANGLE, this.directionLeft == $ab, this.directionRight == $bc)
        $cab : Angle (type == GeoType.ANGLE, this.directionLeft == $ac, this.directionRight == $ab)
        $bca : Angle (type == GeoType.ANGLE, this.directionLeft == $bc, this.directionRight == $ac)
    then
        //actions
        //Create a triangle and insert it to knowledge base
        Triangle triangleABC = new Triangle($a,$b,$c);
        //insert(triangleABC);
        
        //System.out.println("Triangle " + $a.name +""+$b.name+""+$c.name+" Created.");

end
/*rule "sum of two angles on a line is 180 dig"
when 	
	$G1 :GeoRelation( 
					(firstItem.type == GeoType.LINE)
    				&& 
    				( secondItem.type == GeoType.POINT )
    				&& 
    				( relation == Relation.ON_THE_LINE ) 
    				&&
    				( $lineAB : ((Line)firstItem) )
    				&& 
    				( $pointC : ((Point)secondItem) )
    			)
    $lineCD :Line(
    	eval(
    		($lineCD.endPoints[0].name==$pointC.name)||($lineCD.endPoints[1].name==$pointC.name)
    	)
    )
    
		
then
	if($lineCD.endPoints[0].name==$pointC.name){
		System.out.println($lineAB.endPoints[0].name+""+$pointC.name+$lineCD.endPoints[1].name+"+"+
		$lineCD.endPoints[1].name+""+$pointC.name+$lineAB.endPoints[1].name+"combine angle=180");
	}
	else{
		System.out.println($lineAB.endPoints[0].name+""+$pointC.name+$lineCD.endPoints[0].name+"+"+
		$lineCD.endPoints[0].name+""+$pointC.name+$lineAB.endPoints[1].name+"combine angle=180");
	}
	
end

*/
/*
rule "theorem 3"
when 
$G1 :GeoRelation( 
					(firstItem.type == GeoType.LINE)
    				&& 
    				( secondItem.type == GeoType.POINT )
    				&& 
    				( relation == Relation.ON_THE_LINE ) 
    				&&
    				( $lineAB : ((Line)firstItem) )
    				&& 
    				( $pointE : ((Point)secondItem) )
    			)
$G2 :GeoRelation( 
					(firstItem.type == GeoType.LINE)
    				&& 
    				( secondItem.type == GeoType.POINT )
    				&& 
    				( relation == Relation.ON_THE_LINE ) 
    				&&
    				( $lineCD : ((Line)firstItem) )
    				&& 
    				( $pointF : ((Point)secondItem) )
    			)
$G3:GeoRelation(
					relation == Relation.PARALLEL_LINES 
					&&
					((((Line)firstItem)==$lineAB))
					&&
	 				((((Line)secondItem)==$lineCD))
	 		)
$line :Line(((endPoints[0].name==$pointE.name)&&(endPoints[1].name==$pointF.name)
			
			)
			||
			((endPoints[1].name==$pointE.name)&&(endPoints[0].name==$pointF.name)
			
			)
			)
			
then
	System.out.println(
	$lineAB.endPoints[0].name+""+$pointE.name+"//"+
	$lineCD.endPoints[0].name+""+$pointF.name+"and"+
	$lineAB.endPoints[0].name+""+$pointE.name+"//"+
	$pointF.name+""+$lineCD.endPoints[1].name+"and"+
	$pointE.name+""+$lineAB.endPoints[1].name+"//"+
	$lineCD.endPoints[0].name+""+$pointF.name+"and"+
	$pointE.name+""+$lineAB.endPoints[1].name+"//"+
	$pointF.name+""+$lineCD.endPoints[1].name
		);

end

/*
rule "theorem 4"
when 
$G1 :GeoRelation( 
					(firstItem.type == GeoType.LINE)
    				&& 
    				( secondItem.type == GeoType.POINT )
    				&& 
    				( relation == Relation.ON_THE_LINE ) 
    				&&
    				( $lineAB : ((Line)firstItem) )
    				&& 
    				( $pointE : ((Point)secondItem) )
    			)
$G2 :GeoRelation( 
					(firstItem.type == GeoType.LINE)
    				&& 
    				( secondItem.type == GeoType.POINT )
    				&& 
    				( relation == Relation.ON_THE_LINE ) 
    				&&
    				( $lineCD : ((Line)firstItem) )
    				&& 
    				( $pointF : ((Point)secondItem) )
    			)

$line :Line(((endPoints[0].name==$pointE.name)&&(endPoints[1].name==$pointF.name)
			
			)
			||
			((endPoints[1].name==$pointE.name)&&(endPoints[0].name==$pointF.name)
			
			)
			)
$G3:GeoRelation(
	relation==Relation.EQUALS
	&&
	$angle1:((Angle)firstItem)
	&&
	$angle2:((Angle)secondItem)
	&&
	eval(
			(
				(	
					($angle1.directionLeft.endPoints[0].name==$pointE.name)
					||
					($angle1.directionLeft.endPoints[0].name==$pointF.name)
				)
				&&
				(	
					($angle1.directionLeft.endPoints[1].name==$pointE.name)
					||
					($angle1.directionLeft.endPoints[2].name==$pointF.name)
				)
			)
			
		)
)
			
then
	System.out.println(
	$lineAB.endPoints[0].name+""+$pointE.name+"//"+
	$lineAB.endPoints[0].name+""+$pointF.name+"and"+
	$lineAB.endPoints[0].name+""+$pointE.name+"//"+
	$pointF.name+""+$lineCD.endPoints[1].name+"and"+
	$pointE.name+""+$lineAB.endPoints[1].name+"//"+
	$lineCD.endPoints[0].name+""+$pointF.name+"and"+
	$pointE.name+""+$lineAB.endPoints[1].name+"//"+
	$pointF.name+""+$lineCD.endPoints[0].name
		);

end
rule " alternate angles between parallel line"

    when
    GeoRelation(relation==Relation.PARALLEL_LINES
    && $line1:((Line)firstItem)
    && $line2:((Line)secondItem)
    
    
    )
    $angle1 : Angle( directionRight.name==$line1.name || directionLeft.name==$line1.name)
    $angle2 : Angle((directionRight.name==$line2.name
    && directionLeft.name==$angle1.directionLeft.name &&
    eval($angle1.directionRight.name==$line1.name))||(directionLeft.name==$line2.name
    && directionRight.name==$angle1.directionRight.name &&
    eval($angle1.directionLeft.name==$line1.name))
    )
    
    then
   	 
   	 GeoRelation parrallelAngleEqual = new GeoRelation($angle1,$angle2,Relation.EQUALS);
   	 insert(parrallelAngleEqual);
   	// System.out.println($angle1.pointOne.name+""+$angle1.middle.name+""+$angle1.pointThree.name+"equal alternate angles"+
   	 //$angle2.pointOne.name+""+$angle2.middle.name+""+$angle2.pointThree.name);
   	 CheckingEngine.inferedKnowledge.insertGeoRelation(parrallelAngleEqual);
   	 //System.out.println( );
   	 
   	 
   	 
    end
query "getObjectsOfAngle"
	$result: GeoRelation(firstItem.type==GeoType.ANGLE)
end
rule " friend angles between parallel line"

    when
    GeoRelation(relation==Relation.PARALLEL_LINES
    && $line1:((Line)firstItem)
    && $line2:((Line)secondItem)
    
    
    )
    $angle1 : Angle( directionRight.name==$line1.name || directionLeft.name==$line1.name)
    $angle2 : Angle((directionLeft.name==$line2.name
    && directionRight.name==$angle1.directionLeft.name &&
    eval($angle1.directionRight.name==$line1.name))||(directionRight.name==$line2.name
    && directionLeft.name==$angle1.directionRight.name &&
    eval($angle1.directionLeft.name==$line1.name))
    )
    
    then
   	 
   	 GeoRelation parrallelAngleEqual = new GeoRelation($angle1,$angle2,Relation.EQUALS);
   	 //insert(parrallelAngleEqual);
   	 System.out.println($angle1.pointOne.name+""+$angle1.middle.name+""+$angle1.pointThree.name+"+"+
   	 $angle2.pointOne.name+""+$angle2.middle.name+""+$angle2.pointThree.name+"=180");
    end


rule " opersite angles between parallel line"

    when
    GeoRelation(relation==Relation.PARALLEL_LINES
    && $line1:((Line)firstItem)
    && $line2:((Line)secondItem)
    
    
    )
    $angle1 : Angle( directionRight==$line1 || directionLeft==$line1)
    $angle2 : Angle((directionLeft==$line2
    && directionRight==$angle1.directionLeft &&
    eval($angle1.directionRight==$line1))||(directionRight==$line2
    && directionLeft==$angle1.directionRight &&
    eval($angle1.directionLeft==$line1))
    )
    
    then
        
        GeoRelation parrallelAngleEqual = new GeoRelation($angle1,$angle2,Relation.EQUALS);
        insert(parrallelAngleEqual);
        System.out.println($angle1.pointOne.name+""+$angle1.middle.name+""+$angle1.pointThree.name+"equal opersite angles"+
        $angle2.pointOne.name+""+$angle2.middle.name+""+$angle2.pointThree.name);
    end
    
    
    
     rule " angle equility"

    when
    
    $relation1 : (GeoRelation(relation==Relation.EQUALS
    && $item1:(firstItem)
    && $item2:(secondItem)
    
    ))
    
    $relation2 : (GeoRelation(relation==Relation.EQUALS
    && $item3:(firstItem)
    && $item4:(secondItem)
    && (this != $relation1)
    && ($item2.name == $item3.name)
    ))

    
    
    
    
    then
	    GeoRelation equliingRelation = new GeoRelation($item1,$item4,Relation.EQUALS);
    	CheckingEngine.inferedKnowledge.insertGeoRelation(equliingRelation);
    	
         System.out.println( $item1.name +" "+ $item2.name +" "+ $item3.name +" "+ $item4.name);
         //   	 insert(equliingRelation);
         
        
    end */